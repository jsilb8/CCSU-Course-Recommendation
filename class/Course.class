<?php

class Course {

    public $db_id;
    public $des;
    public $num;
    public $name;
    public $credit;
    public $description;
    public $catalog_url;
    public $prereq_group;
    public $priority;
    
    public $group_id;
    public $term;

    // Constructor
    public function __construct($courseID = false) {
        if(is_object($courseID)) print_c($courseID);
        if ($courseID)
            $course = DB::query_array("SELECT * FROM `course` WHERE `courseID`='" . $courseID . "' LIMIT 1");
        $this->build_course($course);
    }

    public static function from_id($courseID) {
        if ($courseID)
            return new Course($courseID);
        return false;
    }

    public static function from_code($des, $num) {
        $courseID = DB::query_value("SELECT * FROM `course` WHERE `des`='" . $des . "' AND `num`='" . $num . "' LIMIT 1", "courseID");
        if ($courseID)
            return new Course($courseID);
        return false;
    }

    protected function build_course($data) {
        $this->db_id = $data['courseID'];
        $this->des = $data['des'];
        $this->num = $data['num'];
        $this->name = $data['name'];
        $this->credit = $data['credits'];
        $this->description = $data['description'];
        $this->catalog_url = $data['catalogURL'];
        $this->prereq_group = DB::query_value("SELECT groupID FROM `groups` WHERE parentCourseID = '" . $this->db_id . "'", "groupID");
        $this->priority = $data['priority'];
        $this->term = $data['term'];
    }
    
    public function __toString() {
        return '<span>' . $this->des . ' ' . $this->num . '</span> <span>' . $this->name . '</span>';
    }
    
    // Used for sorting arrays of course objects
    static function cmp_sort($course1,$course2){
        $course1 = $course1->__toString();
        $course2 = $course2->__toString();
        if ($course1 == $course2) return 0;
        return ($course1 > $course2) ? +1 : -1;
    }
    
    public static function get_has_prereq_group($course_id){
        return query_exists("SELECT groupID FROM `groups` WHERE parentCourseID = '" . $course_id . "' LIMIT 1");
    }

    // returns a recursive array of groups with prereq courses
    public function get_prereq_group() {
        if ($this->db_id) {
            $pg = new Prereq_Group($pid);

            return $pg;
        } else {
            return false;
        }
    }

    public static function get_parent_groups($db_id) {

        $parGroups = DB::query_array_col("SELECT g.groupID FROM `groupHasGroupOrCourse` `g` JOIN groups `c` ON g.groupID=c.groupID WHERE g.courseID='".$db_id."' AND c.partOfProgram IS NULL", "groupID");

        if ($parGroups) {
            foreach ($parGroups as $groupID) {
                $parent[] = $groupID;
            }
            return $parent;
        }
    }

    //for a given course, return all the courses that have it as a prerequisite
    public static function get_master_course_list($courseID, $relevantList) {
        
        $c = new Course($courseID);
        $parentGroupIDs = Course::get_parent_groups($courseID);
       
        if ($parentGroupIDs) 
        {
            
            foreach ($parentGroupIDs as $pid) 
            {
                $pg = new Prereq_Group($pid);
                
                if ($pg->parent_course) 
                {
                    
                    $pcid = $pg->parentCourseID;//query_value("SELECT parentCourseID FROM groups WHERE groupID=$pid", "parentCourseID");
                    //$masterListIDs[] = $pcid;
                    if($relevantList)
                    {
                        foreach ($relevantList as $rid) 
                        {
                            if ($pcid == $rid) 
                            {   
                        
                                $m[] = $pcid;
                            }
                        }
                    }
                } 
                else 
                {
                    
                    $parentID = Prereq_Group::get_parent_group($pid);
                    $PG = new Prereq_Group($parentID);
                    $hasPC = false;
                   
                    while (!$hasPC) 
                    {
                        $id = $PG->db_id;
                        if ($PG->parent_course) 
                        {
                            
                            $pcid2 = $PG->parentCourseID;//query_value("SELECT parentCourseID FROM groups WHERE groupID=$id", "parentCourseID");
                            if($relevantList)
                            {
                                foreach ($relevantList as $rid) 
                                {
                                    if ($pcid2 == $rid) 
                                    {   
                        
                                        $m[] = $pcid2;
                                    }
                                }
                            }
                            
//                            $masterListIDs[] = $pcid2;
                            $hasPC = true;
                        } 
                        else 
                        {
                             
                            
                            $PG = new Prereq_Group(Prereq_Group::get_parent_group($id));
                            
                        }
                    }
                }
            }
//            $count = 0;
//            foreach ($masterListIDs as $id) 
//            {
//                if($relevantList)
//                {
//                    foreach ($relevantList as $rid) 
//                    {
//                        if ($id == $rid) 
//                        {   
//                        
//                            $m[] = $id;
//                        }
//                    }
//                }
//                
//            }
            return $m;
        } 
        else 
        {
            return false;
        }
    }
    
    
    
    
    public static function getCoursesMadeAvail($courseID, $requiredCourses, $list, $avail)
    {
        
        
       
        $ml = Course::get_master_course_list($courseID,$requiredCourses);
        
        if($ml)
        {
            
            foreach($ml as $id)
            {
                $c = new Course($id);
               
               
                $pg = new Prereq_Group($c->prereq_group);
                if(Prereq_Group::check_completion($pg,$list) == 1)
                {
                    
                    $exists = false;
                    for($y=0;$y<count($avail);$y++)
                    {
                        if($avail[$y])
                        {
                                if($id == $avail[$y])
                                {
                                    $exists = true;
                                }
                        }
                   
                    }
                    if(!$exists)
                    {
                        $final[] = $id;
                   
                    }
                }
            }
            return $final;
        }
    }

    //return the length of the deepest chain of a given course, based on a list of courses that make up the graph containing the chain
    public static function getMaxDepth($courseID, $relevantList) {
        $count = array();
        $count2 = 0;
        $ml = Course::get_master_course_list($courseID, $relevantList);


        if ($ml) {

            foreach ($ml as $id) {
                $count[$id] ++;

                $list = $relevantList;

                if (Course::get_master_course_list($id, $relevantList)) {
                    $count[$id] += Course::getMaxDepth($id, $list);
                }
            }

            foreach ($count as $priority) {
                if ($priority > $count2) {
                    $count2 = $priority;
                }
            }
            return $count2;
        } else {
            return 0;
        }
    }

    //return the breadth of a given course, based on a list of courses that make up its graph
    public static function getBreadth($courseID, $relevantList) {

        $ml = Course::get_master_course_list($courseID, $relevantList);

        if ($ml) {

            return count($ml) / 5;
        } else {
            return 0;
        }
    }

    public static function getPriority($courseID, $takenList) {
        $depth = Course::getMaxDepth($courseID, $takenList);
        $breadth = Course::getBreadth($courseID, $takenList);
        $c = new Course($courseID);
        if ($depth > $breadth) {
            //if the course is offered only fall or only spring, add 1 to its priority
            if($c->term == 0 OR $c->term == 1 OR $c->term == 3)
            {
                $depth++;
            }
            return $depth;
        } else {
            //if the course is offered only fall or only spring, add 1 to its priority
            if($c->term == 0 OR $c->term == 1 OR $c->term == 3)
            {
                $breadth++;
            }
           
            
            return $breadth;
        }
    }

    private function get_prereq_groups1() {
        $groups = DB::query("SELECT g.groupID, g.type, p.courseID, p.childGroupID
                                FROM `groups` `g` 
                                LEFT JOIN `groupHasGroupOrCourse` `p` ON g.groupID = p.groupID 
                                WHERE g.parentCourseID = '" . $this->db_id . "'");

        while ($group = fetch_array($groups)) {
            if ($group['courseID']) {
                $prereq['required'][$group['groupID']][] = new Course($group['courseID']);
            }
        }

        return $prereq;
    }
}
