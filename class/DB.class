<?php

class DB {

    private $_connection;
    // Store the single instance.
    private static $_instance;

    public static function getInstance() {
        if (!self::$_instance) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }
    
    // Constructor
    public function __construct() {
        $this->_connection = new mysqli(DB_SERVER, DB_USER, DB_PASS, DB_NAME);
        // Error handling.
        if (mysqli_connect_error()) {
            trigger_error('Failed to connect to MySQL: ' . mysqli_connect_error(), E_USER_ERROR);
        }
    }

    // Empty clone magic method to prevent duplication. 
    private function __clone() {}

    // Get the mysqli connection. 
    public function getConnection() {
        return $this->_connection;
    }

    // Run a query on the Database Connection
    // Accepts String : Returns Database Resource
    public static function sql($query) {
        return self::query($query);
    }
    public static function query($query){
        global $db;
        try {
            //echo '<br />'.$query;
            $result = mysqli_query($db->getConnection(), $query);
        } catch (mysqli_sql_exception $e) {
            echo $e;
            $result = false;
        }
        return $db->confirmQuery($result) ? $result : false;
    }
    
    // Returns an array of the first result of a database query
    public static function query_array($query){
        return self::fetch_assoc(self::query($query));
    }
    
    public static function query_array_col($query,$col="id"){
        return self::fetch_col(self::query($query),$col);
    }
    
    public static function query_value($query,$col="id"){
        $result = self::query_array($query);
        return ($result) ? $result[$col] : false;
    }
    
    public function exists($query){
        $result  = $this->query($query);
        return (DB::num_rows($result)) ? true : false;
    }
    
    // Confirm the mysql query was successful
    // @accepts mysqli resource
    public function confirmQuery($result) {
        if (!$result) {
            die("Database query failed: " . mysqli_error($this->_connection));
        }else 
            return true; 
    }
    
    // Return an associative array of a single row of a mysqli resource
    public static function fetch_assoc($result) {
        return mysqli_fetch_assoc($result);
    }
    
    public static function fetch_array($result) {
        return self::fetch_assoc($result);
    }
    
    public static function arrayify($resource) {
        while($row = self::fetch_array($resource))  $return[] = $row;
        return $return;
    }
    
    // Return an associative array of a single column (default is 'id') of a mysqli resource
    public static function fetch_col($result, $col="id") {
        $output = array();
        while($row = self::fetch_assoc($result))
            $output[] = $row[$col];
        return $output;
    }
    
    // Prepare data to be used in a query. Either can be called with the same result
    public function query_prep($value) {
        if(is_array($value)){
            return $this->query_prep_array($value); 
        }else{
            $escaped_string = mysqli_real_escape_string($this->_connection,$value);
            return $escaped_string;
        }
    }
    
    public function query_prep_array($query_array = array()) {
        $prepped_values = array();
        foreach ($query_array as $key => $value) {
            if(is_array($value))        
                $prepped_values[$key] = $this->query_prep_array($value); 
            else 
                $prepped_values[$key] = $this->query_prep($value);
        }
        return $prepped_values;
    }
    
    // Return the id of the last INSERT Query
    public function insert_id() {
        return mysqli_insert_id($this->_connection);
    }

    // Return number of rows SELECTed by a Database SELECT Query
    public function num_rows($result) {
        return mysqli_num_rows($result);
    }

    // Return number of rows changed by a Database UPDATE or DELETE Query
    public function affected_rows() {
        return mysqli_affected_rows($this->_connection);
    }
    
    // Return an array of column names from a mysqli resource
    public function fetch_fields($table_name) {
        global $db;
        $column_names = array();
        $fields = $db->query_array("SELECT * FROM `".$table_name."` LIMIT 1");
        foreach ($fields as $key => $value)
            $column_names[] = $key;
        return $column_names;
    }
    
    // Convert a string to an array using "}|{"
    public static function string_to_array($string){
        return explode("}|{",$string);
    }
    
    // Convert an array to a string delimited by "}|{"
    public static function array_to_string($array = array()){
        return implode("}|{",$string);
    }

}

$DB = new DB;
$database =& $DB;
$db =& $database;