<?php

class Prereq_Group {

    public $db_id;
    public $name;
    public $display_name;
    public $narrative;
    public $parent_course;
    public $parentCourseID;
    public $priority;
    public $parent_group;
    public $type;
    public $course_list = array();      // An array of Course Objects in this group
    public $full_course_list = array();  // An array of Course Objects in this and all sub groups
    public $sub_groups = array();
    public $req_credits;
    public $partOfProg;
    public $sibling;
    public $remCredits;
    public $atomics;

    // Constructor
    public function __construct($id) {
        //echo "SELECT * FROM groups WHERE groupID='" . $id . "' LIMIT 1 <br />";
        $group = DB::query_array("SELECT * FROM groups WHERE groupID='" . $id . "' LIMIT 1");
        if(!$group) return false;
        
        $this->db_id = $group['groupID'];
        $this->parent_course = $group['parentCourseID'] ? $group['parentCourseID'] : NULL;
        $this->name = $group['name'];
        $this->display_name = $group['display_name'];
        $this->narrative = $group['narrative'];
        $this->type = $group['type'];
        $this->req_credits = $group['req_credits'];
        $this->priority = $group['priority'];

        $this->sub_groups = $this->get_prereq_groups();
        $this->parent_group = Prereq_Group::get_parent_group($this->db_id);
        $this->course_list = $this->get_prereq_courses();
        $this->full_course_list = $this->get_full_course_list_id();
        $this->partOfProg = $group['partOfProgram'];
        $this->parentCourseID = $group['parentCourseID'];
        
        
        
    }
    
    
    //returns display name of prereq group
    public static function get_display_name($group_id){
        return query_value("SELECT display_name FROM `groups` WHERE groupID = '".$group_id."'","display_name");
    }
    
    
    //returns area name of prereq group
    public static function get_area_name($group_id){
        return query_value("SELECT area_name FROM `groups` WHERE groupID = '".$group_id."'","area_name");
    }
    
    
    //returns atomic groups of prereq group (groups with no child groups, just courses)
    public function getAtomics(){
        if($this->sub_groups)
        {
            foreach($this->sub_groups as $g)
            if($g->sub_groups){ 
                $nonAtomics[] = $g->db_id;           
                foreach($g->sub_groups as $sg)    
                    $atomics[] = $sg->db_id;
            }
            else
            $atomics[] = $g->db_id;
     
            if(!$atomics) return false;

            foreach($atomics as $atomicID)
                $atomics_unsorted[] = new Prereq_Group($atomicID);
        
            foreach($atomics_unsorted as $atomic)
                $atomics2[$atomic->name] = $atomic;
        
            return $atomics2; 
        }
        else {
            return false;
        }
        
    }

    
    // prints prereq group
    public function __toString() {

        $return = "<li>" . $this->type() . " Group: " . $this->name . "<ol>";
        
        if ($this->sub_groups)
            foreach ($this->sub_groups as $sub_group)
                $return .= $sub_group;
        if ($this->course_list)
            foreach ($this->course_list as $course)
                $return .= $course; //new Course($course);

        $return .= "</ol></li>";

        return "".$return;
    }
    
    
    //returns the sibling of a prereq group if there is only one sibling
    public function getSib(){
        $pg = new Prereq_Group($this->get_parent_group2());
        if(count($pg->sub_groups) == 2)
            foreach($pg->sub_groups as $sg)
                if($this->db_id != $sg->db_id)
                    return $sg;
        
        return false;
    }

    //returns courses attached to prereq group
    public function get_prereq_courses() {
        $courses = DB::query_array_col("SELECT courseID FROM `groupHasGroupOrCourse` WHERE `groupID`='" . $this->db_id . "' AND `courseID` IS NOT NULL", "courseID");

        if (!is_array($courses))
            return false;
        
        for($i=0; $i<count($courses); $i++){
            $course[$i] = new Course($courses[$i]);
            $course[$i]->group_id = $this->db_id;
        }
        
        
        return $course;
    }

    //returns recursive array of child groups attached to prereq group
    private function get_prereq_groups() {
        $sub_groups = DB::query("SELECT h.*, g.groupID as parentGroupID FROM `groupHasGroupOrCourse` `h` LEFT JOIN `groups` `g` ON h.groupID = g.groupID
                                    WHERE h.groupID='" . $this->db_id . "' AND h.childGroupID IS NOT NULL GROUP BY h.id");

        if (!$sub_groups)
            return false;

        while ($row = DB::fetch_array($sub_groups)) {
            $sg = new Prereq_Group($row['childGroupID']);
            $sg->set_parent_group($row['parentGroupID']);
            $sub_group_list[] = $sg;
        }
        

        return $sub_group_list;
    }
    
    //returns ids of all courses attached directly to prereq group, and all courses attahced indirectly through prereq group's children groups
    private function get_full_course_list_id(){
        $return = [];
        if(is_array($this->course_list))
            foreach($this->course_list as $course)
                $return[] = $course->db_id;
        
        
        
        if(is_array($this->sub_groups))
            foreach ($this->sub_groups as $sub_group)
                if ($sub_group->full_course_list && is_array($return))
                    $return = array_merge($return, $sub_group->full_course_list);
        

        return $return;
        
    }
    
    //returns ids of only courses directly attached to prereq group
    public function get_course_list_id() {
        $return = [];
        if(is_array($this->course_list))
            foreach($this->course_list as $course)
                $return[] = $course->db_id;
        
        return $return;
    }

    //returns an array of course objects for all courses directly and indirectly attached to prereq group
    public function get_full_course_list() {

        $full_course_list = (is_array($this->course_list)) ? $this->course_list : [];
        
        if(is_array($this->sub_groups))
            foreach ($this->sub_groups as $sub_group)
                if (is_array($sub_group->full_course_list))
                    $full_course_list = array_merge($full_course_list, $sub_group->get_full_course_list());
            

        return $full_course_list;
    }

    //return parent group of input course prereq group (cannot be a program requirement group)
    public static function get_parent_group($groupID) {
        $parentGroupID = query_value("SELECT c.groupID as groupID FROM groupHasGroupOrCourse `c` JOIN groups `g` ON c.groupID = g.groupID WHERE "
                . "c.childGroupID=$groupID AND (g.partOfProgram IS NULL OR g.partOfProgram = 0) ", "groupID");

        if ($parentGroupID) {
            return $parentGroupID;
        } else {
            return false;
        }
    }
    
    //return parent group of any group, including program requirement groups
    public function get_parent_group2() {
        $parentGroupID = query_value("SELECT groupID FROM groupHasGroupOrCourse  WHERE childGroupID=$this->db_id", "groupID");

        if ($parentGroupID) {
            return $parentGroupID;
        } else {
            return false;
        }
    }

    //returns 1 if input group complete based on input taken list, and 0 if incomplete.
    public static function check_completion($pg, $takenList) {
        
        //get children of input group
        //$cid = query_value("SELECT childGroupID FROM groupHasGroupOrCourse WHERE groupID=$pg->db_id and childGroupID IS NOT NULL", "childGroupID");
        if($takenList)
        {
        //if input prereq group doesnt have a child
        if (!$pg->sub_groups) {
            //if its an OR
            if ($pg->type == '1') {
                //get courses attached to input prereq group and check each against courses taken
                //$ids = query_array_col("SELECT courseID FROM groupHasGroupOrCourse WHERE groupID=$pg->db_id", "courseID");
                $ids = $pg->full_course_list;

                foreach ($ids as $courseID) {
                    foreach ($takenList as $course) {
                        //If any are taken, group passes
                        if ($course->db_id == $courseID) {
                            return '1';
                        }
                    }
                }
                //If all are not taken, group fails
                return '0';
            }
            //if its an AND
            else if ($pg->type == '0') {
                //get courses attached to input prereq group 

                //$ids = query_array_col("SELECT courseID FROM groupHasGroupOrCourse WHERE groupID=$pg->db_id", "courseID");
                $ids = $pg->full_course_list;

                //check each attached course against courses taken
                if ($ids) {
                    foreach ($ids as $courseID) {

                        $t = "$taken_$courseID";
                        $$t;
                        foreach ($takenList as $course) {
                            if ($courseID == $course->db_id) {
                                $$t = true;
                            }
                        }
                        //if any is not taken, group fails
                        if ($$t != true) {

                            return '0';
                        }
                    }
                }

                //if all are taken, group passes
                return '1';
            }
            //otherwise if its a credits group
            else if ($pg->type == '2') {
                //if the group has a fixed amount of req credits
                if ($pg->req_credits != 0) {
                    //get courses attached to input prereq group 

                    //$ids = query_array_col("SELECT courseID FROM groupHasGroupOrCourse WHERE groupID=$pg->db_id", "courseID");
                    $ids = $pg->full_course_list;

                    $credits = 0;

                    //check each attached course against courses taken
                    foreach ($ids as $courseID) {

                        foreach ($takenList as $course) {
                            if ($courseID == $course->db_id) {
                                $credits += $course->req_credits;
                            }
                        }
                    }
                    //if req credits met, group passes
                    if ($credits >= $pg->req_credits) {

                        return '1';
                    }
                    //if not, group fails
                    else {
                        return '0';
                    }
                }
                //otherwise if the group has a variable amount of req credits dependent upon both a sibling group and the parent
                else {

                    //$pg->parent_Course
                    $sib = new Prereq_Group(2056);

                    //$sibCourses = query_array_col("SELECT courseID FROM groupHasGroupOrCourse WHERE groupID=$sibID ", "courseID");
                    $sibCourses = $sib->full_course_list;

                    $ids2 = array();

                    foreach ($sibCourses as $courseID) {
                        foreach ($takenList as $course) {
                            if ($courseID == $course->db_id) {
                                if (!$credits) {
                                    $credits += $course->credit;
                                    $ids2[] = $course->db_id;
                                }
                            }
                        }
                    }

                    $reqCredits = 5 - $credits;


                    
                    $ids = $pg->full_course_list;


                    $credits2 = 0;
                    //check each attached course against courses taken
                    foreach ($ids as $courseID) {
                        foreach ($takenList as $course) {
                            $takenByOther = false;
                            if ($courseID == $course->db_id) {
                                foreach ($ids2 as $id) {
                                    if ($course->db_id == $id) {
                                        $takenByOther = true;
                                    }
                                }
                                if (!$takenByOther) {
                                    $credits2 += $course->credit;
                                }
                            }
                        }
                    }


                    //if req credits met, group passes
                    if ($credits2 >= $reqCredits OR $credits2 >= 5) {

                        return '1';
                    }
                    //if not, group fails
                    else {
                        return '0';
                    }
                }
            }
        }
        //otherwise if input prereq group does have a child 
        else if ($pg->sub_groups) {
            //get courses attached to input prereq group 
            
            $ids = $pg->get_course_list_id();
            //if it has courses directly attached
            if (implode("", $ids) != null) {
                //if its an OR
                if ($pg->type == '1') {
                    //check each attached course against courses taken
                    foreach ($ids as $courseID) {
                        foreach ($takenList as $course) {
                            //if any attached course is taken, group passes
                            if ($courseID == $course->db_id) {
                                return '1';
                            }
                        }
                    }
                    //if all attached courses not taken, check each child group of input group
                    foreach ($pg->sub_groups as $child) {
                        $list = $takenList;

                        //if any child group passes, the input parent group passes
                        if (Prereq_Group::check_completion($child, $list) == '1') {
                            return '1';
                        }
                    }
                    //if all child groups fail, the input parent group fails
                    return '0';
                }
                //if its an AND
                else if ($pg->type == '0') {
                    //get courses attached to input prereq group 
                    
                    $ids = $pg->get_course_list_id();

                    //check each attached course against courses taken
                    foreach ($ids as $courseID) {
                        $t = "$taken_$courseID";
                        $$t;
                        foreach ($takenList as $course) {
                            if ($courseID == $course->db_id) {

                                $$t = true;
                            }
                        }
                        //if any attached course fails, the parent input group fails
                        if ($$t != true) {
                            return '0';
                        }
                    }
                    //if all attached courses pass, check child groups
                    foreach ($pg->sub_groups as $child) {
                        $list = $takenList;
                        $return = Prereq_Group::check_completion($child, $list);
                        //if any child group fails, parent input group fails
                        if ($return == '0') {
                            return '0';
                        }
                    }
                    //if all child groups pass, parent input group passes
                    return '1';
                }
            }
            //otherwise, if input prereq group doesnt have courses directly attached
            else {
                //if its an OR
                if ($pg->type == '1') {
                    //check each child group
                    foreach ($pg->sub_groups as $child) {

                        $list = $takenList;
                        $return = Prereq_Group::check_completion($child, $list);

                        //if any child passes, parent input group passes
                        if ($return == '1') {
                            return '1';
                        }
                    }
                    //if all children fail, parent input group fails
                    return '0';
                }
                //otherwise if its an AND
                else if ($pg->type == '0') {
                    //check each child group
                    foreach ($pg->sub_groups as $child) {
                        $list = $takenList;

                        //recursively run the check_Completions function on the given child group
                        $return = Prereq_Group::check_completion($child, $list);

                        //if any child group fails, input parent group fails
                        if ($return == '0') {
                            return '0';
                        }
                    }
                    //if all children pass, input parent group passes
                    return '1';
                }
            }
        }
        }
    }

    //set parent of input group
    public function set_parent_group($groupID) {
        $this->parent_group = $groupID;
    }

    
    //use group's type variable to determine how to print it: and group, or group, credits group
    private function type() {
        if ($this->type == '2')
            $return = $this->req_credits . " credits";
        else if ($this->type == '0')
            $return = "and";
        else
            $return = "or";
        return $return;
        
    }

}
